#include <cstdint>
#include <iostream>
#include <random>

extern "C" void spmv2(double *a, double *x, double *y);

void spmv(int A1_size, int *A2_pos, int *A2_idx, double *A_vals, double *y_vals, double *x_vals) {
  // Generated by the Tensor Algebra Compiler (tensor-compiler.org)
  for (int32_t iA = 0; iA < A1_size; iA++) {
    double tj = 0;
    for (int32_t pA2 = A2_pos[iA]; pA2 < A2_pos[iA + 1]; pA2++) {
      int32_t jA = A2_idx[pA2];
      tj += A_vals[pA2] * x_vals[jA];
    }
    y_vals[iA] = tj;
  }
}

long long get_cycles(){
    unsigned int a=0, d=0;
    int ecx=(1<<30)+1; //What counter it selects?
    __asm __volatile("rdtsc" : "=a"(a), "=d"(d) : "c"(ecx));
    return ((long long)a) | (((long long)d) << 32);
}

extern int size;
extern int pos[];
extern int idx[];
extern double vals[];

int main() {
  int n = size;
  auto *y_vals = new double[n];
  auto *x_vals = new double[n];
  for (int i = 0; i < n; i++) {
    x_vals[i] = 0;
    y_vals[i] = 0;
  }
  volatile int iter_ = 100;
  int iter = iter_;
  std::cerr << "BASELINE\n";
  for (int j = 0; j < 4; j++) {
    unsigned long a = get_cycles();
    for (int i = 0; i < iter; i++) {
      spmv(size, pos, idx, vals, y_vals, x_vals);
    }
    std::cerr << get_cycles() - a << '\n';
  }
  std::cerr << "OPTIMIZED\n";
  for (int j = 0; j < 4; j++) {
    unsigned long a = get_cycles();
    for (int i = 0; i < iter; i++) {
      spmv2(vals, x_vals, y_vals);
    }
    std::cerr << get_cycles() - a << '\n';
  }
  //  for (int i = 0; i < n; i++) {
  //    std::cout << y_vals[i] << '\n';
  //  }
}
